import{Command as h}from"commander";import{collect as f}from"metautil";import{createReadStream as g,statSync as d}from"fs";async function*p(e,t){let s=g(e),a="";for await(let i of s){let n=(a+i).split(t);for(let o=0;o<n.length-1;o++)yield n[o];a=n[n.length-1]}a!==""&&(yield a)}async function*m(e,t=`
`){let s=p(e,t),a=d(e).size,i=0;for await(let n of s)i+=n.length,yield{persent:a/i*100,content:n}}var c=class{values;quantities;constructor(){this.values=new Set,this.quantities=new Map}add(t){this.values.has(t)?this.quantities.set(t,this.quantities.get(t)+1):(this.values.add(t),this.quantities.set(t,1))}getValues(){return this.values}getQuantities(){return this.quantities}getQuantityOf(t){return console.log(t),console.log(this.quantities.get(t)),this.values.has(t)?this.quantities.get(t):0}getByQuantity(t,s){let a=[];for(let[i,n]of this.quantities)n>=t&&n<=s&&a.push(i);return a}};var r=new c,u=new h,y=async(e,t,s,a)=>{let i=t?m(e,a):p(e,a);for await(let n of i){let o=t?n.content:n;s.add(o.trim())}},l=(e,t)=>async(s,a,i)=>{let n=f(s);for(let o of s)n.wait(o,y,o,a,t,i);return await n,e()};u.name("epic-parser").version("1.0.0").description("Fast file parsing program (and maybe more)");u.command("unique").description("Get unique values").arguments("<files...>").option("-s, --show","Show progress").option("-sp, --separator <splitter>","Separate values by",`
`).action(async(e,t)=>{let s=await l(r.getValues.bind(r),r)(e,t.show,t.separator);console.log(s)});u.command("count").description("Get count for each unique value").arguments("<files...>").option("-s, --show","Show progress").option("-sp, --separator <splitter>","Separate values by",`
`).action(async(e,t)=>{let s=await l(r.getQuantities.bind(r),r)(e,t.show,t.separator);console.log(s)});u.command("amount").description("Get amount of given value").arguments("<files...>").requiredOption("-v, --value <value>","Value to count").option("-s, --show","Show progress").option("-sp, --separator <splitter>","Separate values by",`
`).action(async(e,t)=>{let s=await l(r.getQuantityOf.bind(r,t.value),r)(e,t.show,t.separator);console.log(s)});u.command("by-amount").description("Find values which amount is in range").arguments("<files...>").option("-s, --show","Show progress").option("-m, --min <min>","Min value").option("-M, --max <max>","Max value").option("-sp, --separator <splitter>","Separate values by",`
`).action(async(e,t)=>{let s=await l(r.getByQuantity.bind(r,Number(t.min),Number(t.max)),r)(e,t.show,t.separator);console.log(s)});u.parse(process.argv);
